Glossar
-------

### Hafemann - Sticha ###
* Material:
Die Klasse Material fungiert lediglich als zusammenfassende View aller einzelnen MaterialXXX-Klassen.
Model/Controller werden nicht genutzt. Material wird im Navigationsmenü verlinkt.

Für alle Materialtypen gilt:
Die Methode "Melden" ist lediglich in der View implementiert und noch nicht funktionsfähig.
Jeder User hat das Recht neue Materialien hochzuladen/zu erstellen.
Lediglich Administratoten und der jeweilige Autor dürfen die Materialien löschen.

* Materialtext:
Die Klasse Materialtext gibt die Möglichkeit Texte als Material zu erstellen und zu speichern.
Die Klasse Materialtext hat neben Titel und Text noch einen Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id).
In der View werden der Titel, Text, der Name des zugehörigen KnowledgeElements, der Autor und das Datum angezeigt.
Texte können nur vom jeweiligen Autor bearbeitet werden.

* Materiallink:
Die Klasse Materiallink gibt die Möglichkeit einzelne Links als Material zu erstellen und zu speichern.
Die Klasse Materiallink hat neben Titel und Link noch einen Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id).
In der View werden der Titel, der Hyperlink, der Name des zugehörigen KnowledgeElements, der Autor und das Datum angezeigt.
Links können nur vom jeweiligen Autor bearbeitet werden.

* Materialdocument:
Die Klasse Materialdocument gibt die Möglichkeit einzelne Dokumente als Material zu erstellen und zu speichern.
Die Klasse Materialdocument hat neben Titel und Datei noch einen Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id).
In der View werden der Titel, das Dokument als Link, der Name des zugehörigen KnowledgeElements, der Autor und das Datum angezeigt.
Das Bild wird als Datei im Verzeichnis /public/assets/materials/documents/... gespeichert.
Zulässige Dateiformate sind neben PDF alle gängigen Text-, Präsentations- und Tabellenkalkulationsdateiformate.

* Materialpicture:
Die Klasse Materialpicture gibt die Möglichkeit einzelne Bilder als Material zu erstellen und zu speichern.
Die Klasse Materialpicture hat neben Titel und Datei noch einen Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id).
In der View werden der Titel, das Bild, der Name des zugehörigen KnowledgeElements, der Autor und das Datum angezeigt.
Das Bild wird als Datei im Verzeichnis /public/assets/materials/pictures/... gespeichert.
Zulässige Dateiformate sind gif, jpeg und png.

* Materialvideo:
Die Klasse Materialvideo gibt die Möglichkeit einzelne Videos als Material zu erstellen und zu speichern.
Die Klasse Materialvideo hat neben Titel und Datei noch einen Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id).
In der View werden der Titel, das Video, der Name des zugehörigen KnowledgeElements, der Autor und das Datum angezeigt.
Das Video wird als Datei im Verzeichnis /public/assets/materials/videos/... gespeichert.
Derzeit sind nur mp4-Videos zulässig.


* Question:
Die Klasse Question fungiert als Thread eines Forums. Dabei können von jedem User neue Fragen gestellt/Themen eröffnet werden..
In den Attributen werden neben dem Titel der Frage und der Frage noch ein Autor (user_id) und ein zugehöriges KnowledgeElement (knowledge_element_id) gespeichert.
Es existiert in der View bereits ein Melden-Button, der bisher ohne Funktion ist.
Jeder Admin und der Autor können eine Frage löschen, wobei alle zugehörigen Antworten ebenfalls gelöscht werden.

* Answer:
Die Klasse Answer beschreibt die Antworten auf eine Question.
Sie speichert den Autor und den Antworttext (die zugehörige question_id wird automatisch ergänzt).
Eine Antwort kann vom Autor bearbeitet werden und von Admins und dem Autor gelöscht werden.
Der Melden-Link ist ebenfalls ohne Funktion bereits in der View vorhanden.


* Wiki:
Ein Wikiartikel kann von jedem User erstellt und bearbeitet werden.
Löschen kann nur ein Admin (da mehrere Autoren).
In einem Wikiartikel werden Informationen zu einem Thema aufbereitet und gebündelt.



### Ellermeier - Zach ###
* Subject:
Entsprechen der Fächereinteilung des Lehrplans.

* Topic:
Eindeutig abgegrenzter Themenbereich von Lerninhalten. Dieser kann mehreren Fächern zugeteilt werden. Beispiel: Funktionen und funktionale Zusammenhänge für Mathematik und Informatik.

* KnowledgeElement:
Aufteilung eines Topics in Lerneinheiten. Beispiel: Lineare Funktionen.

* LearningObjective:
Aufteilung eines KnowledgeElements auf die sechs Cognitive Process Dimensions nach Anderson/Krathwohl. Beispiel: Anwendungen von Linearen Funktionen.



## Grett - Ottinger ##
* Exam:
Die Klasse Exam gibt die Möglichkeit Exams zu einem KnowledegElement zusammenzustellen und diese von einem Learner bearbeiten zu lassen.
Jedes Exam besteht aus drei Exercise mit jeweils einer Subexercise. Das KnowledeElement jeder Exercise muss hierfür mit dem KnowledegElement des Exams übereinstimmen
und das Attribut sequence jeder Exercise muss False gesetzt sein.
Außerdem bestitzt die erste Subexercise die cognitive_dimension 1, die zweite Subexercise die cognitive_dimension 3 und die dritte Subexercise die cognitive_dimension 6.
Desweitern müssen die Attribute active und examItem jeder Subexercise auf True gesetzt sein.
Nach diesen Kriterien wird ein Exam zufällig zusammengestellt, sodass sich Exams zum gleichen KnowledegeElement unterscheiden können.
Das Attribut minPoints speichert die minimale Punktzahl, das Attribut maxPoints die maximale Punktzahl und maxTime die Zeit, in der das Exam bearbeitet werden muss.
Diese drei Attribute sind weitere Kriterien für die Zusammenstellung eines Exams, die jedoch zu diesem Zeitpunkt auf Grund der geringen Aufgabenmenge noch außer Acht gelassen wurden.

* Exercise:

* Performance:

* Progress:
In der Klasse Progress wird die Bearbeitung eines Exams zusammen mit dem Learner, von welchem das Exam bearbeitet wurde, gespeichert.
Hierbei wird der Learner mit Hilfe seiner User Id gespeichert. Die Bearbeitung der einzelnen Aufgaben wird in den Attributen submission1, submission2 und submission3 als Text gespeichert.
Außerdem werden die Ids der drei im Exam verwendeten Subexercises gespeichert. Dies ist sinnvoll, damit die Bearbeitung auch zu einem späteren Zeitpunkt nachvollziehbar ist.
Zuständig hierfür sind die Attribute subexercise1, subexercise2 und subexercise3.
Auch das KnowledgeElement, welches durch das Exam abgeschlossen wurde, wird im Progress gespeichert. Hierfür ist das Attribut knowledge_element_id zuständig.
Nachdem ein Learner ein Exam erfolgreich bearbeitet und abgegeben hat, wird allen Teachern in der View die Bearbeitung zusammen mit den jeweiligen Exercise und Subexercise und der Learner angezeigt.
Ein Teacher hat nun die Möglichkeit eine Note einzutragen. Wobei diese Note einen Wert zwischen 1 und 6 annehmen muss. Der zuständige Teacher und die Note werden in der Klasse Progress in den Attributen teacher_id bzw. grade gespeichert.
Sobald ein Teacher eine Note eingetragen hat, kann sich nur noch der Teacher selber oder ein Admin die Bearbeitung anzeigen lassen und gegebenenfalls die Note ändern.
Für alle anderen Teacher ist die Bearbeitung ab diesem Zeitpunkt nicht mehr sichtbar. In der View des Learners werden für jedes von ihm geschriebene Exam das KnowledegeElement, die erhaltene Note,
der zuständige Teacher und der Zeitpunkt der Abgaben angezeigt. Außerdem kann sich ein Learner seine Bearbeitung anzeigen lassen.

* Solution:

* Subexercise:
Die Klasse Subxercise bietet die Möglichkeit Unteraufgaben zu bestehenden Exercise zu erstellen und zu speichern.
Um die Subexercise mit der zugehörigen Exercise zu verknüpfen, besitzt die Klasse Subexercise ein Attribut exercise_id.
Da eine Exercise mehrere Subexercise besitzen kann und die Reihenfolge der Subexercise von Bedeutung sein kann, wird im Attribut position die Position der jeweiligen Subexercise gespeichert.
Natürlich muss auch der Inhalt der Subexercise gespeichert werden. Dies geschieht im Attribut text. Die Lösung einer Subexercise wird im Attribut solution gespeichert,
die Punkte, die erreicht werden können, im Attribut points. Außerdem wird jeder Subexercise eine CognitiveDimension zugeordnet.
Hierfür wird im Attribut cognitive_dimension ein Integerwert von 1="remember" bis 6="create" gespeichert.
Ob eine Subexercise für ein Exam ausgewählt werden kann entscheidet das Attribut examItem, welches beim Erstellen einer Subexercise festgelegt werden muss.
Wird eine Subexercise gelöscht, so wird das Attribut active auf False gesetzt. Dieses Attribut ist standardmäßig auf True gesetzt.
Falls eine Subexercise von einem Learner erstellt wurde, muss das Attribut moderated von einem Teacher auf True gesetzt werden um die Subexercise für alle sichtbar zu schalten.
Bevor dies nicht geschehen ist, wird die Subexercise nicht angezeigt. In den Attributen created_at bzw. updated_at wird gespeichert wann eine Subexercise erstellt bzw. überarbeitet wurde.
